CREATE EXTENSION IF NOT EXISTS postgis;

CREATE TABLE person
(
    person_id          INT GENERATED BY DEFAULT AS IDENTITY,
    name               VARCHAR,
    lastname           VARCHAR,
    username           VARCHAR NOT NULL UNIQUE,
    password           VARCHAR NOT NULL,
    mail               VARCHAR NOT NULL UNIQUE,
    pass_to_modify     BOOLEAN DEFAULT FALSE,
    alert_mail         BOOLEAN DEFAULT FALSE,
    is_super_admin     BOOLEAN DEFAULT FALSE,
    api_key            VARCHAR,
    key_never_expire   BOOLEAN DEFAULT FALSE,
    key_expires_at     TIMESTAMPTZ,
    is_service_account BOOLEAN DEFAULT FALSE,
    key_description    VARCHAR,

    PRIMARY KEY (person_id)
);

CREATE TABLE vocabulary_type
(
    vocabulary_type_id INT GENERATED BY DEFAULT AS IDENTITY,
    label              VARCHAR UNIQUE NOT NULL, -- opentheso, opentypo, etc...

    PRIMARY KEY (vocabulary_type_id)
);

CREATE TABLE vocabulary
(
    vocabulary_id   INT GENERATED BY DEFAULT AS IDENTITY,
    fk_type_id      INT            NOT NULL,
    uri             VARCHAR UNIQUE NOT NULL,
    ark_resolver    VARCHAR        NOT NULL,
    vocabulary_name VARCHAR        NOT NULL,


    PRIMARY KEY (vocabulary_id),
    FOREIGN KEY (fk_type_id) REFERENCES vocabulary_type (vocabulary_type_id)
);

CREATE TABLE ark
(
    ark_id VARCHAR UNIQUE NOT NULL,

    primary key (ark_id)
);

CREATE TABLE vocabulary_collection
(
    vocabulary_collection_id INT GENERATED BY DEFAULT AS IDENTITY,
    fk_ark_id                VARCHAR UNIQUE NOT NULL,
    fk_vocabulary_id         INT            NOT NULL,

    PRIMARY KEY (vocabulary_collection_id),
    FOREIGN KEY (fk_vocabulary_id) REFERENCES vocabulary (vocabulary_id),
    FOREIGN KEY (fk_ark_id) REFERENCES ark (ark_id)
);

CREATE TABLE concept
(
    concept_id       INT GENERATED BY DEFAULT AS IDENTITY,
    fk_vocabulary_id INT            NOT NULL,
    fk_ark_id        VARCHAR UNIQUE NOT NULL,
    label            VARCHAR        NOT NULL,

    PRIMARY KEY (concept_id),
    FOREIGN KEY (fk_vocabulary_id) REFERENCES vocabulary (vocabulary_id),
    FOREIGN KEY (fk_ark_id) REFERENCES ark (ark_id)
);

CREATE TABLE field
(
    field_id               INT GENERATED BY DEFAULT AS IDENTITY,
    field_code             VARCHAR NOT NULL, -- format : table_name.field_name
    fk_user_id             INT,
    fk_parent_concept_id   INT,              -- une categorie d'ue ou categorie de prelevement par ex : US,UF, Ceramique...
    fk_question_concept_id INT,              -- À quoi répond t'on? par ex :categorie d'ue, forme, couleur, ...

    PRIMARY KEY (field_id),
    FOREIGN KEY (fk_parent_concept_id) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_question_concept_id) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_user_id) REFERENCES person (person_id)
);

CREATE TABLE field_vocabulary_collection
(

    fk_collection_id INT NOT NULL,
    fk_field_id      INT NOT NULL,

    PRIMARY KEY (fk_field_id, fk_collection_id),
    FOREIGN KEY (fk_collection_id) REFERENCES vocabulary_collection (vocabulary_collection_id),
    FOREIGN KEY (fk_field_id) REFERENCES field (field_id)
);

CREATE TABLE spatial_unit
(
    spatial_unit_id        INT GENERATED BY DEFAULT AS IDENTITY,
    name                   VARCHAR        NOT NULL,
    fk_ark_id              VARCHAR UNIQUE NOT NULL,
    spatial_extent         GEOMETRY(Polygon) NOT NULL, -- coordonée de l'unité spatiale
    fk_concept_category_id INT,

    PRIMARY KEY (spatial_unit_id),
    FOREIGN KEY (fk_ark_id) REFERENCES ark (ark_id),
    FOREIGN KEY (fk_concept_category_id) REFERENCES concept (concept_id)
);

CREATE TABLE spatial_hierarchy
(
    fk_parent_id INT,
    fk_child_id  INT,


    PRIMARY KEY (fk_parent_id, fk_child_id),
    FOREIGN KEY (fk_parent_id) REFERENCES spatial_unit (spatial_unit_id),
    FOREIGN KEY (fk_child_id) REFERENCES spatial_unit (spatial_unit_id)

);



CREATE TABLE action_unit
(
    action_unit_id      INT GENERATED BY DEFAULT AS IDENTITY,
    begin_date          TIMESTAMPTZ NOT NULL,
    end_date            TIMESTAMPTZ NOT NULL,
    fk_type             INT,
    fk_ark_id           VARCHAR UNIQUE NOT NULL,
    fk_user_id          INT,
    fk_spatial_unit_id  INT NOT NULL,

    PRIMARY KEY (action_unit_id),
    FOREIGN KEY (fk_spatial_unit_id) REFERENCES spatial_unit (spatial_unit_id),
    FOREIGN KEY (fk_type) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_ark_id) REFERENCES ark (ark_id),
    FOREIGN KEY (fk_user_id) REFERENCES person (person_id)
);

CREATE TABLE action_hierarchy
(
    fk_parent_id INT,
    fk_child_id  INT,


    PRIMARY KEY (fk_parent_id, fk_child_id),
    FOREIGN KEY (fk_parent_id) REFERENCES action_unit (action_unit_id),
    FOREIGN KEY (fk_child_id) REFERENCES action_unit (action_unit_id)

);

CREATE TABLE siamois_document
(
    document_id     INT GENERATED BY DEFAULT AS IDENTITY,
    fk_ark_id       VARCHAR UNIQUE NOT NULL,
    title           VARCHAR, -- might be useful
    doc_description VARCHAR, -- might be useful
    fk_nature       INT,
    fk_scale        INT,
    fk_author_id    INT NOT NULL,
    fk_format       INT,
    fk_parent       INT,
    url             VARCHAR,
    --localisation_document       VARCHAR,TODO : tbd
    --metadata_document           TEXT,TODO : tbd
    --stockage_document           VARCHAR,TODO : tbd
    --license_document            TEXT,TODO : tbd
    --statut_document             VARCHAR,TODO : tbd

    PRIMARY KEY (document_id),
    FOREIGN KEY (fk_scale) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_nature) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_format) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_parent) REFERENCES siamois_document (document_id),
    FOREIGN KEY (fk_ark_id) REFERENCES ark (ark_id),
    FOREIGN KEY (fk_author_id) REFERENCES person (person_id)
);

CREATE TABLE recording_unit
(
    recording_unit_id   INT GENERATED BY DEFAULT AS IDENTITY,
    fk_ark_id           VARCHAR UNIQUE NOT NULL,
    fk_type             INT,
    recording_unit_date TIMESTAMPTZ,
    fk_action_unit_id   INT NOT NULL,
    fk_spatial_unit_id  INT NOT NULL, -- dans quelle unité spatiale cette UE se trouve?
    spatial_extent      GEOMETRY(Polygon) NOT NULL, -- coordonée de l'ué
    fk_author_id        INT NOT NULL,

    PRIMARY KEY (recording_unit_id),
    FOREIGN KEY (fk_type) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_action_unit_id) REFERENCES action_unit (action_unit_id),
    FOREIGN KEY (fk_spatial_unit_id) REFERENCES spatial_unit (spatial_unit_id),
    FOREIGN KEY (fk_ark_id) REFERENCES ark (ark_id),
    FOREIGN KEY (fk_author_id) REFERENCES person (person_id)
);

CREATE TABLE recording_unit_document
(
    fk_document_id          INT,
    fk_recording_unit_id INT,

    PRIMARY KEY (fk_document_id, fk_recording_unit_id),
    FOREIGN KEY (fk_document_id) REFERENCES siamois_document (document_id),
    FOREIGN KEY (fk_recording_unit_id) REFERENCES recording_unit (recording_unit_id)
);

CREATE TABLE recording_unit_hierarchy
(
    fk_parent_id INT,
    fk_child_id  INT,

    PRIMARY KEY (fk_parent_id, fk_child_id),
    FOREIGN KEY (fk_parent_id) REFERENCES recording_unit (recording_unit_id),
    FOREIGN KEY (fk_child_id) REFERENCES recording_unit (recording_unit_id)
);


CREATE TABLE stratigraphic_relationship
(
    fk_recording_unit_1_id     INT,
    fk_recording_unit_2_id     INT,
    fk_relationship_concept_id INT,

    PRIMARY KEY (fk_recording_unit_1_id, fk_recording_unit_2_id),
    FOREIGN KEY (fk_recording_unit_1_id) REFERENCES recording_unit (recording_unit_id),
    FOREIGN KEY (fk_recording_unit_2_id) REFERENCES recording_unit (recording_unit_id),
    FOREIGN KEY (fk_relationship_concept_id) REFERENCES concept (concept_id)
);

CREATE TABLE recording_unit_study
(
    recording_unit_study_id INT GENERATED BY DEFAULT AS IDENTITY,
    author                  INT, -- TODO : link to author or user
    study_date              TIMESTAMPTZ,
    fk_ark_id               VARCHAR UNIQUE NOT NULL,
    fk_method               INT,
    fk_action_unit_id       INT,
    fk_recording_unit_id    INT,
    fk_author_id            INT NOT NULL,

    PRIMARY KEY (recording_unit_study_id),
    FOREIGN KEY (fk_method) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_action_unit_id) REFERENCES action_unit (action_unit_id),
    FOREIGN KEY (fk_ark_id) REFERENCES ark (ark_id),
    FOREIGN KEY (fk_recording_unit_id) REFERENCES recording_unit (recording_unit_id),
    FOREIGN KEY (fk_author_id) REFERENCES person (person_id)
);

CREATE TABLE ru_study_document
(
    fk_document_id INT,
    fk_ru_study_id INT,

    PRIMARY KEY (fk_document_id, fk_ru_study_id),
    FOREIGN KEY (fk_document_id) REFERENCES siamois_document (document_id),
    FOREIGN KEY (fk_ru_study_id) REFERENCES recording_unit_study (recording_unit_study_id)
);

CREATE TABLE ru_study_typology
(
    fk_ru_study_id         INT,
    fk_typology_concept_id INT,
    fk_question_concept_id INT,

    PRIMARY KEY (fk_ru_study_id, fk_typology_concept_id, fk_question_concept_id),
    FOREIGN KEY (fk_typology_concept_id) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_ru_study_id) REFERENCES recording_unit_study (recording_unit_study_id),
    FOREIGN KEY (fk_question_concept_id) REFERENCES concept (concept_id)
);

CREATE TABLE specimen
(
    specimen_id          INT GENERATED BY DEFAULT AS IDENTITY,
    fk_recording_unit_id INT,
    fk_ark_id            VARCHAR UNIQUE NOT NULL,
    -- todo : morphometrie INT ?
    fk_specimen_category INT,
    -- todo : traitement INT
    fk_collection_method INT,         -- todo : faut il deux champs? il est ecrit COMMENT et POURQUOI dans le miro
    collection_date      TIMESTAMPTZ, -- quand a il été prelevé
    fk_action_unit_id    INT,
    fk_author_id         INT NOT NULL,
    coordinates          GEOMETRY(Point) NOT NULL, -- coordonée du prelevement
    -- pas besoin de : "fk_spatial_unit_id   INT," on le connait déjà via l'UE
    -- storage -- todo : c'est quoi stockage prelevement??

    PRIMARY KEY (specimen_id),
    FOREIGN KEY (fk_recording_unit_id) REFERENCES recording_unit (recording_unit_id),
    FOREIGN KEY (fk_specimen_category) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_ark_id) REFERENCES ark (ark_id),
    FOREIGN KEY (fk_collection_method) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_action_unit_id) REFERENCES action_unit (action_unit_id),
    FOREIGN KEY (fk_author_id) REFERENCES person (person_id)

);

CREATE TABLE specimen_document
(
    fk_document_id INT,
    fk_specimen_id INT,

    PRIMARY KEY (fk_document_id, fk_specimen_id),
    FOREIGN KEY (fk_document_id) REFERENCES siamois_document (document_id),
    FOREIGN KEY (fk_specimen_id) REFERENCES specimen (specimen_id)
);

CREATE TABLE specimen_movement
(
    movement_id          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fk_specimen_id       INT         NOT NULL,
    departure_date       TIMESTAMPTZ NOT NULL,
    return_date          TIMESTAMPTZ NOT NULL,
    origin_location      VARCHAR, -- todo : define
    destination_location VARCHAR, -- todo : define
    movement_reason      VARCHAR, -- todo : useful?
    handled_by           VARCHAR, -- todo : useful?
    notes                TEXT,    -- todo : useful?

    FOREIGN KEY (fk_specimen_id) REFERENCES specimen (specimen_id)
);

CREATE TABLE specimen_group
(
    specimen_group_id INT GENERATED BY DEFAULT AS IDENTITY,
    name              VARCHAR NOT NULL,

    PRIMARY KEY (specimen_group_id)
);

CREATE TABLE specimen_group_attribution
(
    fk_specimen_group_id INT,
    fk_specimen_id       INT,

    PRIMARY KEY (fk_specimen_group_id, fk_specimen_id),
    FOREIGN KEY (fk_specimen_group_id) REFERENCES specimen_group (specimen_group_id),
    FOREIGN KEY (fk_specimen_id) REFERENCES specimen (specimen_id)
);

CREATE TABLE specimen_study
(
    specimen_study_id    INT GENERATED BY DEFAULT AS IDENTITY,
    --author   INT, -- TODO : Lien avec auteur
    study_date           TIMESTAMPTZ,
    fk_ark_id            VARCHAR UNIQUE NOT NULL,
    fk_method            INT,
    fk_specimen_group_id INT,
    fk_action_unit_id    INT,
    fk_author_id         INT NOT NULL,

    PRIMARY KEY (specimen_study_id),
    FOREIGN KEY (fk_method) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_ark_id) REFERENCES ark (ark_id),
    FOREIGN KEY (fk_specimen_group_id) REFERENCES specimen_group (specimen_group_id),
    FOREIGN KEY (fk_action_unit_id) REFERENCES action_unit (action_unit_id),
    FOREIGN KEY (fk_author_id) REFERENCES person (person_id)
);

CREATE TABLE specimen_study_document
(
    fk_document_id       INT,
    fk_specimen_study_id INT,

    PRIMARY KEY (fk_document_id, fk_specimen_study_id),
    FOREIGN KEY (fk_document_id) REFERENCES siamois_document (document_id),
    FOREIGN KEY (fk_specimen_study_id) REFERENCES specimen_study (specimen_study_id)
);

CREATE TABLE specimen_study_typology
(
    fk_specimen_study_id   INT,
    fk_typology_concept_id INT,
    fk_question_concept_id INT,

    PRIMARY KEY (fk_specimen_study_id, fk_typology_concept_id, fk_question_concept_id),
    FOREIGN KEY (fk_typology_concept_id) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_question_concept_id) REFERENCES concept (concept_id),
    FOREIGN KEY (fk_specimen_study_id) REFERENCES specimen_study (specimen_study_id)
);

CREATE TABLE log_entry
(
    log_entry_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    fk_user_id   INT,
    log_date     TIMESTAMPTZ,
    message      TEXT,
    fk_ark_id    VARCHAR,


    PRIMARY KEY (log_entry_id),
    FOREIGN KEY (fk_user_id) REFERENCES person (person_id),
    FOREIGN KEY (fk_ark_id) REFERENCES ark (ark_id)
);

CREATE INDEX idx_log_entry_user_id ON log_entry (fk_user_id);
CREATE INDEX idx_log_entry_log_date ON log_entry (log_date);

CREATE TABLE spatial_unit_document
(
    fk_document_id     INT,
    fk_spatial_unit_id INT,

    PRIMARY KEY (fk_document_id, fk_spatial_unit_id),
    FOREIGN KEY (fk_document_id) REFERENCES siamois_document (document_id),
    FOREIGN KEY (fk_spatial_unit_id) REFERENCES spatial_unit (spatial_unit_id)
);

CREATE TABLE action_unit_document
(
    fk_document_id    INT,
    fk_action_unit_id INT,

    PRIMARY KEY (fk_document_id, fk_action_unit_id),
    FOREIGN KEY (fk_document_id) REFERENCES siamois_document (document_id),
    FOREIGN KEY (fk_action_unit_id) REFERENCES action_unit (action_unit_id)
);

CREATE TABLE team
(
    team_id     INT GENERATED BY DEFAULT AS IDENTITY,
    name        VARCHAR NOT NULL,
    description VARCHAR,

    PRIMARY KEY (team_id)
);

CREATE TABLE person_role_team
(
    fk_person_id       INT,
    fk_role_concept_id INT,
    fk_team_id         INT,

    PRIMARY KEY (fk_team_id, fk_person_id, fk_role_concept_id),
    FOREIGN KEY (fk_team_id) REFERENCES team (team_id),
    FOREIGN KEY (fk_person_id) REFERENCES person (person_id),
    FOREIGN KEY (fk_role_concept_id) REFERENCES concept (concept_id)
);

CREATE TABLE system_role
(
    system_role_id INT,
    role_name      VARCHAR UNIQUE NOT NULL,

    PRIMARY KEY (system_role_id)
);

CREATE TABLE system_role_user
(
    person_id INT,
    role_id   INT,

    PRIMARY KEY (person_id, role_id),
    FOREIGN KEY (person_id) REFERENCES person (person_id),
    FOREIGN KEY (role_id) REFERENCES system_role (system_role_id)
);