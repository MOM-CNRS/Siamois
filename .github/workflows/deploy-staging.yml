name: Build & Deploy (staging)

on:
  push:
    branches:
      - staging
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-staging
  cancel-in-progress: false

jobs:
  build-and-deploy:
    name: Build and deploy to staging
    runs-on: ubuntu-latest
    environment: STAGING

    env:
      BUILD_DIR: target
      ARTIFACT_PATTERN: "*.jar"
      REMOTE_DIR: ${{ secrets.SERVER_PATH }}      # ex: /opt/app
      SSH_HOST: ${{ secrets.SSH_HOST }}           # ex: your.server.tld
      SSH_USER: ${{ secrets.SSH_USER }}           # ex: deploy
      SSH_PORT: ${{ secrets.SSH_PORT }}           # ex: 22 (optionnel)
      DEPLOY_SCRIPT: ${{ secrets.DEPLOY_SCRIPT_PATH }}  # ex: /opt/app/deploy.sh

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: zulu

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build (Maven)
        run: mvn -B -DskipTests package

      - name: Locate JAR
        id: jar
        run: |
          shopt -s nullglob
          files=($BUILD_DIR/$ARTIFACT_PATTERN)
          if [ ${#files[@]} -eq 0 ]; then
            echo "Aucun JAR trouvé dans $BUILD_DIR" >&2
            exit 1
          fi
          newest=$(ls -t $BUILD_DIR/$ARTIFACT_PATTERN | head -n1)
          echo "jar_path=$newest" >> "$GITHUB_OUTPUT"
          echo "Found JAR: $newest"

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SERVER_KEY }} # clé privée du user SSH

      - name: Add known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${SSH_PORT:-22}" "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Copy JAR to server
        run: |
          scp -P "${SSH_PORT:-22}" "${{ steps.jar.outputs.jar_path }}" "${SSH_USER}@${SSH_HOST}:${REMOTE_DIR}/"

      - name: Run deploy.sh on server
        run: |
          ssh -p "${SSH_PORT:-22}" "${SSH_USER}@${SSH_HOST}" bash -lc '
            set -euo pipefail
            JAR_PATH=$(ls -t "'"$REMOTE_DIR"'"/*.jar | head -n1)
            echo "Deploying $JAR_PATH with: "'"$DEPLOY_SCRIPT"'"
            "'"$DEPLOY_SCRIPT"'"
          '
